{"ast":null,"code":"// import React, {Component} from 'react';\n// import './product.css';\n// import { axiosService } from '../../service/axios';\n// class Product extends Component()  {\n//     constructor(props) {\n//         super();\n//         this.state = {\n//             products:[],\n//             mktProducts:[],\n//             pages:[],\n//             pagesSegment:[],\n//             sort: '',\n//             page: 0,\n//             size: 1,\n//             idProduct: 0,\n//             totalPages: '',\n//             totalElements: '',\n//         }\n//         this.loadProducts = this.loadProducts.bind(this);\n//         this.loadMktProducts = this.loadMktProducts.bind(this);\n//         this.sortFind = this.sortFind.bind(this);\n//         this.productFind = this.productFind.bind(this);\n//         this.find = this.find.bind(this);\n//         this.loadPages = this.loadPages.bind(this);\n//         this.changePage = this.changePage.bind(this);\n//         this.leftPage = this.leftPage.bind(this);\n//         this.rightPage = this.rightPage.bind(this);\n//     }  \n//     // componentDidMount() {\n//     //    this.loadProducts();\n//     //    this.loadMktProducts();\n//     //    let pages = [];\n//     //    for(let i = 1; i < this.state.totalPages + 1; i++) {\n//     //        pages.push(i);\n//     //    }\n//     //    this.setState({pages : pages})\n//     // }\n//     async loadProducts() {\n//         try {\n//             const response = await axiosService({\n//                 url: '/product/find',\n//                 method:'GET',\n//                 params: {\n//                     idProduct: '',\n//                     page: 0,\n//                     size: '0',\n//                     sort: '',\n//                     sortDirection: ''\n//                 }\n//             })\n//             console.log(response);\n//             this.setState({products: response.data.response});\n//         } catch (error) {\n//             console.log(error.message);\n//         }\n//     }\n//     async loadMktProducts(){\n//         try {\n//             const response = await axiosService({\n//                 url: '/marketProduct/find', method:'GET',\n//                 params: {\n//                     idProduct: this.state.idProduct,\n//                     page: this.state.page,\n//                     size: this.state.size,\n//                     sort: this.state.sort,\n//                     sortDirection: ''\n//                 }\n//             })\n//             console.log(response)\n//             this.setState({mktProducts: response.data.response});\n//             this.setState({totalElements: response.data.totalElements});\n//             this.setState({totalPages: response.data.totalPages});\n//         } catch (error) {\n//             console.log(error.message);\n//         }\n//         this.loadPages();\n//     }\n//     sortFind(e) {\n//         this.setState({sort: e.target.value})\n//     }\n//     productFind(e) {\n//         this.setState({idProduct: e.target.value})\n//     }\n//     find() {\n//         console.log(this.state.idProduct);\n//         console.log(this.state.sort);\n//     }\n//     loadPages() {\n//         debugger;\n//         let pages = [];\n//         let segment = [];\n//         let pg = this.state.page + 1;\n//         for(let i = 1; i < this.state.totalPages + 1; i++) {\n//             pages.push(i);\n//         }\n//         segment = pages.slice(pg-2 >= 0 ? pg-2 : 0, pg+2 <= pages.length ? pg+2 : pages.length);\n//         this.setState({pages: pages})\n//         this.setState({pagesSegment: segment})\n//     }\n//     changePage(page){\n//         debugger;\n//         let segment = [];\n//         let pages = this.state.pages;\n//         let quantExibPages = 3;\n//         let init = (page - (quantExibPages-1) >= 0) ? page - (quantExibPages-1) : 0;\n//         let limit = (init + quantExibPages < pages.length) ? init + quantExibPages : pages.length;\n//         console.log('pages.length: ' + pages.length)\n//         console.log(page)\n//         page = page - 1;\n//         page = (page > this.state.totalPages) ? this.state.totalPages-1 : page;\n//         page = (page <= 0) ? 0 : page;\n//         segment = pages.slice(init, limit);\n//         if(limit === pages.length && (limit - quantExibPages) >= 0) {\n//             segment = pages.slice(limit-quantExibPages, limit);\n//         }\n//         this.setState({page: page});     \n//         this.setState({pagesSegment: segment})\n//     }\n//     leftPage(page) {\n//         console.log(page);\n//         if(page - 1 >= 0) {\n//             let nextPage = page;\n//             this.changePage(nextPage)\n//         }\n//     }\n//     rightPage(page) {\n//         console.log(page);\n//         debugger;\n//         if(page + 2 > 0 || page + 2 < this.state.pages.length) {\n//             let nextPage = page + 2;\n//             this.changePage(nextPage)\n//         }\n//     }\n//     render() {   \n//         return(\n//             <div id='containerProducts'>\n//                 <div id='titleProducts'>Produtos por posto de coleta</div>\n//                 <div id='containerFind'>\n//                     <div id='containerSelect'>\n//                         <label id='labelSelectFind'>Produto: </label>\n//                         <select id='selectFind' name='idProduct' value={this.state.idProduct} onChange={this.productFind}>\n//                                     <option id='selectFindOpt' key={0} value=''>Selecione...</option>\n//                             {this.state.products.map((p) => {\n//                                 return(\n//                                     <option id='selectFindOpt' key={p.id} value={p.id}>{p.product}</option>\n//                                 )\n//                             })}\n//                         </select>\n//                     </div>\n//                     <div id='containerSelect'>\n//                         <label id='labelSelectFind'>Ordem: </label>\n//                         <select id='selectFind' name='sort' value={this.state.sort} onChange={this.sortFind}>\n//                             <option id='selectFindOpt' value=''>Selecione...</option>\n//                             <option id='selectFindOpt' value='Valor'>Valor</option> \n//                             <option id='selectFindOpt' value='Produto'>Produto</option>\n//                             <option id='selectFindOpt' value='Posto'>Posto de coleta</option>\n//                         </select>\n//                     </div>\n//                     <button id='btnFindProduct' onClick={this.find}>Buscar</button>\n//                 </div>\n//                 <div id='containerTbProducts'>\n//                     <table id='tbProduct'>\n//                         <thead>\n//                             <tr>\n//                                 <th id='tbProductTh'>Produto</th>\n//                                 <th id='tbProductTh'>Valor/Kg</th>\n//                                 <th id='tbProductTh'>Posto de Coleta</th>\n//                             </tr>\n//                         </thead>\n//                         <tbody>\n//                         {this.state.mktProducts.map((p, index) => { \n//                             return(\n//                             <tr id='tbProductTr' style={{'backgroundColor': (index % 2 === 0) ?  '#F3F6F6' : '#FFF'}} key={p.idMktProduct}>\n//                                 <td id='tbProductTd'>{p.product}</td>\n//                                 <td id='tbProductTd'>{p.value}</td>\n//                                 <td id='tbProductTdPosto'>{p.nmFantazy}</td>\n//                             </tr>\n//                              ); \n//                         },)}\n//                         </tbody>\n//                     </table>\n//                     <div id='paginator'>\n//                         <div id='div-arrow-left'> {(this.state.page <= 0) ?\n//                             <img src={require('../../assets/imgs/seta-left-opac.svg')} alt='seta-left' /> :\n//                             <img src={require('../../assets/imgs/seta-left.svg')} alt='seta-left'\n//                                       onClick={() => this.leftPage(this.state.page)}/>}\n//                         </div>\n//                             <div id='numbersPages'>{this.state.pagesSegment.map((p) => {\n//                                 return(<div key={p} id='numPage' onClick={() => this.changePage(p)}\n//                                    style={{backgroundColor: (p === this.state.page + 1) ?\n//                                    '#DDD': 'transparent'}}>{p}\n//                                    </div>)})}\n//                             </div>\n//                         <div id='div-arrow-right'>{(this.state.page + 1 >= this.state.totalPages) ?\n//                             <img src={require('../../assets/imgs/seta-right-opac.svg')} alt='seta-right' /> :\n//                             <img src={require('../../assets/imgs/seta-right.svg')} alt='seta-right'\n//                                       onClick={() => this.rightPage(this.state.page)}/>}\n//                         </div>\n//                     </div>                    \n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n// export default Product;","map":{"version":3,"sources":["C:/Users/juanpapiro/Documents/wspaceweb/mapa-da-reciclagem/src/pages/Product/index.js"],"names":[],"mappingssourcesContent":["// import React, {Component} from 'react';\r\n\r\n// import './product.css';\r\n// import { axiosService } from '../../service/axios';\r\n\r\n// class Product extends Component()  {\r\n\r\n//     constructor(props) {\r\n//         super();\r\n//         this.state = {\r\n//             products:[],\r\n//             mktProducts:[],\r\n//             pages:[],\r\n//             pagesSegment:[],\r\n//             sort: '',\r\n//             page: 0,\r\n//             size: 1,\r\n//             idProduct: 0,\r\n//             totalPages: '',\r\n//             totalElements: '',\r\n//         }\r\n//         this.loadProducts = this.loadProducts.bind(this);\r\n//         this.loadMktProducts = this.loadMktProducts.bind(this);\r\n//         this.sortFind = this.sortFind.bind(this);\r\n//         this.productFind = this.productFind.bind(this);\r\n//         this.find = this.find.bind(this);\r\n//         this.loadPages = this.loadPages.bind(this);\r\n//         this.changePage = this.changePage.bind(this);\r\n//         this.leftPage = this.leftPage.bind(this);\r\n//         this.rightPage = this.rightPage.bind(this);\r\n//     }  \r\n\r\n//     // componentDidMount() {\r\n//     //    this.loadProducts();\r\n//     //    this.loadMktProducts();\r\n//     //    let pages = [];\r\n//     //    for(let i = 1; i < this.state.totalPages + 1; i++) {\r\n//     //        pages.push(i);\r\n//     //    }\r\n//     //    this.setState({pages : pages})\r\n//     // }\r\n\r\n//     async loadProducts() {\r\n//         try {\r\n//             const response = await axiosService({\r\n//                 url: '/product/find',\r\n//                 method:'GET',\r\n//                 params: {\r\n//                     idProduct: '',\r\n//                     page: 0,\r\n//                     size: '0',\r\n//                     sort: '',\r\n//                     sortDirection: ''\r\n//                 }\r\n//             })\r\n//             console.log(response);\r\n//             this.setState({products: response.data.response});\r\n//         } catch (error) {\r\n//             console.log(error.message);\r\n//         }\r\n//     }\r\n\r\n//     async loadMktProducts(){\r\n//         try {\r\n//             const response = await axiosService({\r\n//                 url: '/marketProduct/find', method:'GET',\r\n//                 params: {\r\n//                     idProduct: this.state.idProduct,\r\n//                     page: this.state.page,\r\n//                     size: this.state.size,\r\n//                     sort: this.state.sort,\r\n//                     sortDirection: ''\r\n//                 }\r\n//             })\r\n//             console.log(response)\r\n//             this.setState({mktProducts: response.data.response});\r\n//             this.setState({totalElements: response.data.totalElements});\r\n//             this.setState({totalPages: response.data.totalPages});\r\n//         } catch (error) {\r\n//             console.log(error.message);\r\n//         }\r\n//         this.loadPages();\r\n//     }\r\n\r\n//     sortFind(e) {\r\n//         this.setState({sort: e.target.value})\r\n//     }\r\n\r\n//     productFind(e) {\r\n//         this.setState({idProduct: e.target.value})\r\n//     }\r\n\r\n//     find() {\r\n//         console.log(this.state.idProduct);\r\n//         console.log(this.state.sort);\r\n//     }\r\n\r\n//     loadPages() {\r\n//         debugger;\r\n//         let pages = [];\r\n//         let segment = [];\r\n//         let pg = this.state.page + 1;\r\n//         for(let i = 1; i < this.state.totalPages + 1; i++) {\r\n//             pages.push(i);\r\n//         }\r\n\r\n//         segment = pages.slice(pg-2 >= 0 ? pg-2 : 0, pg+2 <= pages.length ? pg+2 : pages.length);\r\n        \r\n//         this.setState({pages: pages})\r\n//         this.setState({pagesSegment: segment})\r\n\r\n//     }\r\n\r\n//     changePage(page){\r\n//         debugger;\r\n//         let segment = [];\r\n//         let pages = this.state.pages;\r\n//         let quantExibPages = 3;\r\n//         let init = (page - (quantExibPages-1) >= 0) ? page - (quantExibPages-1) : 0;\r\n//         let limit = (init + quantExibPages < pages.length) ? init + quantExibPages : pages.length;\r\n//         console.log('pages.length: ' + pages.length)\r\n//         console.log(page)\r\n//         page = page - 1;\r\n//         page = (page > this.state.totalPages) ? this.state.totalPages-1 : page;\r\n//         page = (page <= 0) ? 0 : page;\r\n//         segment = pages.slice(init, limit);\r\n//         if(limit === pages.length && (limit - quantExibPages) >= 0) {\r\n//             segment = pages.slice(limit-quantExibPages, limit);\r\n//         }\r\n//         this.setState({page: page});     \r\n//         this.setState({pagesSegment: segment})\r\n//     }\r\n\r\n//     leftPage(page) {\r\n//         console.log(page);\r\n//         if(page - 1 >= 0) {\r\n//             let nextPage = page;\r\n//             this.changePage(nextPage)\r\n//         }\r\n//     }\r\n\r\n//     rightPage(page) {\r\n//         console.log(page);\r\n//         debugger;\r\n//         if(page + 2 > 0 || page + 2 < this.state.pages.length) {\r\n//             let nextPage = page + 2;\r\n//             this.changePage(nextPage)\r\n//         }\r\n//     }\r\n\r\n \r\n//     render() {   \r\n//         return(\r\n//             <div id='containerProducts'>\r\n//                 <div id='titleProducts'>Produtos por posto de coleta</div>\r\n//                 <div id='containerFind'>\r\n//                     <div id='containerSelect'>\r\n//                         <label id='labelSelectFind'>Produto: </label>\r\n//                         <select id='selectFind' name='idProduct' value={this.state.idProduct} onChange={this.productFind}>\r\n//                                     <option id='selectFindOpt' key={0} value=''>Selecione...</option>\r\n//                             {this.state.products.map((p) => {\r\n//                                 return(\r\n//                                     <option id='selectFindOpt' key={p.id} value={p.id}>{p.product}</option>\r\n//                                 )\r\n//                             })}\r\n//                         </select>\r\n//                     </div>\r\n//                     <div id='containerSelect'>\r\n//                         <label id='labelSelectFind'>Ordem: </label>\r\n//                         <select id='selectFind' name='sort' value={this.state.sort} onChange={this.sortFind}>\r\n//                             <option id='selectFindOpt' value=''>Selecione...</option>\r\n//                             <option id='selectFindOpt' value='Valor'>Valor</option> \r\n//                             <option id='selectFindOpt' value='Produto'>Produto</option>\r\n//                             <option id='selectFindOpt' value='Posto'>Posto de coleta</option>\r\n//                         </select>\r\n//                     </div>\r\n//                     <button id='btnFindProduct' onClick={this.find}>Buscar</button>\r\n//                 </div>\r\n//                 <div id='containerTbProducts'>\r\n//                     <table id='tbProduct'>\r\n//                         <thead>\r\n//                             <tr>\r\n//                                 <th id='tbProductTh'>Produto</th>\r\n//                                 <th id='tbProductTh'>Valor/Kg</th>\r\n//                                 <th id='tbProductTh'>Posto de Coleta</th>\r\n//                             </tr>\r\n//                         </thead>\r\n//                         <tbody>\r\n//                         {this.state.mktProducts.map((p, index) => { \r\n//                             return(\r\n//                             <tr id='tbProductTr' style={{'backgroundColor': (index % 2 === 0) ?  '#F3F6F6' : '#FFF'}} key={p.idMktProduct}>\r\n//                                 <td id='tbProductTd'>{p.product}</td>\r\n//                                 <td id='tbProductTd'>{p.value}</td>\r\n//                                 <td id='tbProductTdPosto'>{p.nmFantazy}</td>\r\n//                             </tr>\r\n//                              ); \r\n//                         },)}\r\n//                         </tbody>\r\n//                     </table>\r\n//                     <div id='paginator'>\r\n//                         <div id='div-arrow-left'> {(this.state.page <= 0) ?\r\n//                             <img src={require('../../assets/imgs/seta-left-opac.svg')} alt='seta-left' /> :\r\n//                             <img src={require('../../assets/imgs/seta-left.svg')} alt='seta-left'\r\n//                                       onClick={() => this.leftPage(this.state.page)}/>}\r\n//                         </div>\r\n//                             <div id='numbersPages'>{this.state.pagesSegment.map((p) => {\r\n//                                 return(<div key={p} id='numPage' onClick={() => this.changePage(p)}\r\n//                                    style={{backgroundColor: (p === this.state.page + 1) ?\r\n//                                    '#DDD': 'transparent'}}>{p}\r\n//                                    </div>)})}\r\n//                             </div>\r\n//                         <div id='div-arrow-right'>{(this.state.page + 1 >= this.state.totalPages) ?\r\n//                             <img src={require('../../assets/imgs/seta-right-opac.svg')} alt='seta-right' /> :\r\n//                             <img src={require('../../assets/imgs/seta-right.svg')} alt='seta-right'\r\n//                                       onClick={() => this.rightPage(this.state.page)}/>}\r\n//                         </div>\r\n//                     </div>                    \r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n// export default Product;"]},"metadata":{},"sourceType":"module"}