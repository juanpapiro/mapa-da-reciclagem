{"ast":null,"code":"\"use strict\";\n/**\n * implements https://w3c.github.io/accname/\n */\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\juanpapiro\\\\Documents\\\\wspaceweb\\\\mapa-da-reciclagem\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar getRole_1 = __importDefault(require(\"./getRole\"));\n\nvar util_1 = require(\"./util\");\n/**\n * Small utility that handles all the JS quirks with `this` which is important\n * if no mock is provided.\n * @param element\n * @param options - These are not optional to prevent accidentally calling it without options in `computeAccessibleName`\n */\n\n\nfunction createGetComputedStyle(element, options) {\n  var window = util_1.safeWindow(element);\n  var _options$getComputedS = options.getComputedStyle,\n      getComputedStyle = _options$getComputedS === void 0 ? window.getComputedStyle.bind(window) : _options$getComputedS;\n  return getComputedStyle;\n}\n/**\n *\n * @param {string} string -\n * @returns {FlatString} -\n */\n\n\nfunction asFlatString(s) {\n  return s.trim().replace(/\\s\\s+/g, \" \");\n}\n/**\n * https://w3c.github.io/aria/#namefromprohibited\n */\n\n\nfunction prohibitsNaming(node) {\n  return hasAnyConcreteRoles(node, [\"caption\", \"code\", \"deletion\", \"emphasis\", \"generic\", \"insertion\", \"paragraph\", \"presentation\", \"strong\", \"subscript\", \"superscript\"]);\n}\n/**\n *\n * @param node -\n * @param options - These are not optional to prevent accidentally calling it without options in `computeAccessibleName`\n * @returns {boolean} -\n */\n\n\nfunction isHidden(node, options) {\n  if (!util_1.isElement(node)) {\n    return false;\n  }\n\n  if (node.hasAttribute(\"hidden\") || node.getAttribute(\"aria-hidden\") === \"true\") {\n    return true;\n  }\n\n  var style = createGetComputedStyle(node, options)(node);\n  return style.getPropertyValue(\"display\") === \"none\" || style.getPropertyValue(\"visibility\") === \"hidden\";\n}\n/**\n *\n * @param {Node} node -\n * @param {string} attributeName -\n * @returns {Element[]} -\n */\n\n\nfunction idRefs(node, attributeName) {\n  if (util_1.isElement(node) && node.hasAttribute(attributeName)) {\n    // safe due to hasAttribute check\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    var ids = node.getAttribute(attributeName).split(\" \");\n    return ids // safe since it can't be null for an Element\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    .map(function (id) {\n      return node.ownerDocument.getElementById(id);\n    }).filter(function (element) {\n      return element !== null;\n    } // TODO: why does this not narrow?\n    );\n  }\n\n  return [];\n}\n/**\n * All defined children. This include childNodes as well as owned (portaled) trees\n * via aria-owns\n * @param node\n */\n\n\nfunction queryChildNodes(node) {\n  return Array.from(node.childNodes).concat(idRefs(node, \"aria-owns\"));\n}\n/**\n * @param {Node} node -\n * @returns {boolean} - As defined in step 2E of https://w3c.github.io/accname/#mapping_additional_nd_te\n */\n\n\nfunction isControl(node) {\n  return hasAnyConcreteRoles(node, [\"button\", \"combobox\", \"listbox\", \"textbox\"]) || hasAbstractRole(node, \"range\");\n}\n\nfunction hasAbstractRole(node, role) {\n  if (!util_1.isElement(node)) {\n    return false;\n  }\n\n  switch (role) {\n    case \"range\":\n      return hasAnyConcreteRoles(node, [\"meter\", \"progressbar\", \"scrollbar\", \"slider\", \"spinbutton\"]);\n\n    default:\n      throw new TypeError(\"No knowledge about abstract role '\".concat(role, \"'. This is likely a bug :(\"));\n  }\n}\n\nfunction hasAnyConcreteRoles(node, roles) {\n  if (util_1.isElement(node)) {\n    return roles.indexOf(getRole_1.default(node)) !== -1;\n  }\n\n  return false;\n}\n/**\n * element.querySelectorAll but also considers owned tree\n * @param element\n * @param selectors\n */\n\n\nfunction querySelectorAllSubtree(element, selectors) {\n  var elements = [];\n\n  for (var _i = 0, _arr = [element].concat(_toConsumableArray(idRefs(element, \"aria-owns\"))); _i < _arr.length; _i++) {\n    var root = _arr[_i];\n    elements.push.apply(elements, _toConsumableArray(Array.from(root.querySelectorAll(selectors))));\n  }\n\n  return elements;\n}\n\nfunction querySelectedOptions(listbox) {\n  if (util_1.isHTMLSelectElement(listbox)) {\n    // IE11 polyfill\n    return listbox.selectedOptions || querySelectorAllSubtree(listbox, \"[selected]\");\n  }\n\n  return querySelectorAllSubtree(listbox, '[aria-selected=\"true\"]');\n}\n\nfunction isMarkedPresentational(node) {\n  return hasAnyConcreteRoles(node, [\"none\", \"presentation\"]);\n}\n/**\n * TODO\n */\n\n\nfunction isNativeHostLanguageTextAlternativeElement(node) {\n  return false;\n}\n/**\n * https://w3c.github.io/aria/#namefromcontent\n */\n\n\nfunction allowsNameFromContent(node) {\n  return hasAnyConcreteRoles(node, [\"button\", \"cell\", \"checkbox\", \"columnheader\", \"gridcell\", \"heading\", \"label\", \"legend\", \"link\", \"menuitem\", \"menuitemcheckbox\", \"menuitemradio\", \"option\", \"radio\", \"row\", \"rowheader\", \"switch\", \"tab\", \"tooltip\", \"treeitem\"]);\n}\n/**\n * TODO\n */\n\n\nfunction isDescendantOfNativeHostLanguageTextAlternativeElement(node) {\n  return false;\n}\n/**\n * TODO\n */\n\n\nfunction computeTooltipAttributeValue(node) {\n  return null;\n}\n\nfunction getValueOfTextbox(element) {\n  if (util_1.isHTMLInputElement(element) || util_1.isHTMLTextAreaElement(element)) {\n    return element.value;\n  } // https://github.com/eps1lon/dom-accessibility-api/issues/4\n\n\n  return element.textContent || \"\";\n}\n\nfunction getTextualContent(declaration) {\n  var content = declaration.getPropertyValue(\"content\");\n\n  if (/^[\"'].*[\"']$/.test(content)) {\n    return content.slice(1, -1);\n  }\n\n  return \"\";\n}\n/**\n * implements https://w3c.github.io/accname/#mapping_additional_nd_te\n * @param root\n * @param [options]\n * @parma [options.getComputedStyle] - mock window.getComputedStyle. Needs `content`, `display` and `visibility`\n */\n\n\nfunction computeAccessibleName(root) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var consultedNodes = new Set();\n\n  if (prohibitsNaming(root)) {\n    return \"\";\n  } // 2F.i\n\n\n  function computeMiscTextAlternative(node, context) {\n    var accumulatedText = \"\";\n\n    if (util_1.isElement(node)) {\n      var pseudoBefore = createGetComputedStyle(node, options)(node, \"::before\");\n      var beforeContent = getTextualContent(pseudoBefore);\n      accumulatedText = \"\".concat(beforeContent, \" \").concat(accumulatedText);\n    }\n\n    var _iterator = _createForOfIteratorHelper(queryChildNodes(node)),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var child = _step.value;\n        var result = computeTextAlternative(child, {\n          isEmbeddedInLabel: context.isEmbeddedInLabel,\n          isReferenced: false,\n          recursion: true\n        }); // TODO: Unclear why display affects delimiter\n\n        var display = util_1.isElement(node) && createGetComputedStyle(node, options)(node).getPropertyValue(\"display\");\n        var separator = display !== \"inline\" ? \" \" : \"\";\n        accumulatedText += \"\".concat(separator).concat(result);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (util_1.isElement(node)) {\n      var pseudoAfter = createGetComputedStyle(node, options)(node, \":after\");\n      var afterContent = getTextualContent(pseudoAfter);\n      accumulatedText = \"\".concat(accumulatedText, \" \").concat(afterContent);\n    }\n\n    return accumulatedText;\n  }\n  /**\n   * TODO: placeholder\n   */\n\n\n  function computeAttributeTextAlternative(node) {\n    if (!util_1.isElement(node)) {\n      return null;\n    }\n\n    var titleAttribute = node.getAttributeNode(\"title\");\n\n    if (titleAttribute !== null && !consultedNodes.has(titleAttribute)) {\n      consultedNodes.add(titleAttribute);\n      return titleAttribute.value;\n    }\n\n    var altAttribute = node.getAttributeNode(\"alt\");\n\n    if (altAttribute !== null && !consultedNodes.has(altAttribute)) {\n      consultedNodes.add(altAttribute);\n      return altAttribute.value;\n    }\n\n    if (util_1.isHTMLInputElement(node) && node.type === \"button\") {\n      consultedNodes.add(node);\n      return node.getAttribute(\"value\") || \"\";\n    }\n\n    return null;\n  }\n\n  function computeElementTextAlternative(node) {\n    if (!util_1.isHTMLInputElement(node)) {\n      return null;\n    }\n\n    var input = node; // https://w3c.github.io/html-aam/#input-type-text-input-type-password-input-type-search-input-type-tel-input-type-email-input-type-url-and-textarea-element-accessible-description-computation\n\n    if (input.type === \"submit\") {\n      return \"Submit\";\n    }\n\n    if (input.type === \"reset\") {\n      return \"Reset\";\n    }\n\n    var labels = input.labels; // IE11 does not implement labels, TODO: verify with caniuse instead of mdn\n\n    if (labels === null || labels === undefined || labels.length === 0) {\n      return null;\n    }\n\n    consultedNodes.add(input);\n    return Array.from(labels).map(function (element) {\n      return computeTextAlternative(element, {\n        isEmbeddedInLabel: true,\n        isReferenced: false,\n        recursion: true\n      });\n    }).filter(function (label) {\n      return label.length > 0;\n    }).join(\" \");\n  }\n\n  function computeTextAlternative(current, context) {\n    if (consultedNodes.has(current)) {\n      return \"\";\n    } // special casing, cheating to make tests pass\n    // https://github.com/w3c/accname/issues/67\n\n\n    if (hasAnyConcreteRoles(current, [\"menu\"])) {\n      consultedNodes.add(current);\n      return \"\";\n    } // 2A\n\n\n    if (isHidden(current, options) && !context.isReferenced) {\n      consultedNodes.add(current);\n      return \"\";\n    } // 2B\n\n\n    var labelElements = idRefs(current, \"aria-labelledby\");\n\n    if (!context.isReferenced && labelElements.length > 0) {\n      return labelElements.map(function (element) {\n        return computeTextAlternative(element, {\n          isEmbeddedInLabel: context.isEmbeddedInLabel,\n          isReferenced: true,\n          // thais isn't recursion as specified, otherwise we would skip\n          // `aria-label` in\n          // <input id=\"myself\" aria-label=\"foo\" aria-labelledby=\"myself\"\n          recursion: false\n        });\n      }).join(\" \");\n    } // 2C\n    // Changed from the spec in anticipation of https://github.com/w3c/accname/issues/64\n    // spec says we should only consider skipping if we have a non-empty label\n\n\n    var skipToStep2E = context.recursion && isControl(current);\n\n    if (!skipToStep2E) {\n      var ariaLabel = (util_1.isElement(current) && current.getAttribute(\"aria-label\") || \"\").trim();\n\n      if (ariaLabel !== \"\") {\n        consultedNodes.add(current);\n        return ariaLabel;\n      } // 2D\n\n\n      if (!isMarkedPresentational(current)) {\n        var elementTextAlternative = computeElementTextAlternative(current);\n\n        if (elementTextAlternative !== null) {\n          consultedNodes.add(current);\n          return elementTextAlternative;\n        }\n\n        var attributeTextAlternative = computeAttributeTextAlternative(current);\n\n        if (attributeTextAlternative !== null) {\n          consultedNodes.add(current);\n          return attributeTextAlternative;\n        }\n      }\n    } // 2E\n\n\n    if (skipToStep2E || context.isEmbeddedInLabel || context.isReferenced) {\n      if (hasAnyConcreteRoles(current, [\"combobox\", \"listbox\"])) {\n        consultedNodes.add(current);\n        var selectedOptions = querySelectedOptions(current);\n\n        if (selectedOptions.length === 0) {\n          // defined per test `name_heading_combobox`\n          return util_1.isHTMLInputElement(current) ? current.value : \"\";\n        }\n\n        return Array.from(selectedOptions).map(function (selectedOption) {\n          return computeTextAlternative(selectedOption, {\n            isEmbeddedInLabel: context.isEmbeddedInLabel,\n            isReferenced: false,\n            recursion: true\n          });\n        }).join(\" \");\n      }\n\n      if (hasAbstractRole(current, \"range\")) {\n        consultedNodes.add(current);\n\n        if (current.hasAttribute(\"aria-valuetext\")) {\n          // safe due to hasAttribute guard\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          return current.getAttribute(\"aria-valuetext\");\n        }\n\n        if (current.hasAttribute(\"aria-valuenow\")) {\n          // safe due to hasAttribute guard\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          return current.getAttribute(\"aria-valuenow\");\n        } // Otherwise, use the value as specified by a host language attribute.\n\n\n        return current.getAttribute(\"value\") || \"\";\n      }\n\n      if (hasAnyConcreteRoles(current, [\"textbox\"])) {\n        consultedNodes.add(current);\n        return getValueOfTextbox(current);\n      }\n    } // 2F: https://w3c.github.io/accname/#step2F\n\n\n    if (allowsNameFromContent(current) || util_1.isElement(current) && context.isReferenced || isNativeHostLanguageTextAlternativeElement(current) || isDescendantOfNativeHostLanguageTextAlternativeElement(current)) {\n      consultedNodes.add(current);\n      return computeMiscTextAlternative(current, {\n        isEmbeddedInLabel: context.isEmbeddedInLabel,\n        isReferenced: false\n      });\n    }\n\n    if (current.nodeType === current.TEXT_NODE) {\n      consultedNodes.add(current);\n      return current.textContent || \"\";\n    }\n\n    if (context.recursion) {\n      consultedNodes.add(current);\n      return computeMiscTextAlternative(current, {\n        isEmbeddedInLabel: context.isEmbeddedInLabel,\n        isReferenced: false\n      });\n    }\n\n    var tooltipAttributeValue = computeTooltipAttributeValue(current);\n\n    if (tooltipAttributeValue !== null) {\n      consultedNodes.add(current);\n      return tooltipAttributeValue;\n    } // TODO should this be reachable?\n\n\n    consultedNodes.add(current);\n    return \"\";\n  }\n\n  return asFlatString(computeTextAlternative(root, {\n    isEmbeddedInLabel: false,\n    isReferenced: false,\n    recursion: false\n  }));\n}\n\nexports.computeAccessibleName = computeAccessibleName;","map":null,"metadata":{},"sourceType":"script"}